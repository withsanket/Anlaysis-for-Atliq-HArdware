1. Provide the list of markets in which customer "Atliq Exclusive" operates its
business in the APAC region.

HINTS:
1. use dim_customer table
2. concepts like where, distinct, conditions, etc

CODE:
SELECT distinct Market FROM dim_customer
where customer = "Atliq Exclusive" and region = "APAC";

---------------------------------------------------------------------------------------------------

2. What is the percentage of unique product increase in 2021 vs. 2020? The
final output contains these fields,
unique_products_2020
unique_products_2021
percentage_chg

HINTS:
1. use fact_sales_monthly table
2. To get the unique product count, use the product_code column.
3. concepts like CTE’s, cross join, Round, distinct, count, as, select,
where, etc

CODE:
WITH unique_product_count AS
(
	SELECT COUNT(DISTINCT CASE WHEN fiscal_year = 2020 THEN product_code END) AS unique_products_2020,
		   COUNT(DISTINCT CASE WHEN fiscal_year = 2021 THEN product_code END) AS unique_products_2021
		   FROM fact_sales_monthly 
)
SELECT unique_products_2020,
	   unique_products_2021,
	   CONCAT(ROUND(((unique_products_2021-unique_products_2020)*1.0/unique_products_2020)*100,2),'%') AS percentage_chg
FROM unique_product_count;

------------------------------------------------------------------------------------------------------------------------

3. Provide a report with all the unique product counts for each segment and
sort them in descending order of product counts. The final output contains
2 fields,
segment
product_count

HINTS:
1. use dim_product table
2. concepts like Group by, order by, count, distinct, etc

CODE:
SELECT Segment, count(product) AS Product_Count
FROM dim_product
GROUP BY segment
ORDER BY Product_Count DESC;

-------------------------------------------------------------------------------------------------------------

4. Follow-up: Which segment had the most increase in unique products in
2021 vs 2020? The final output contains these fields,
segment
product_count_2020
product_count_2021
difference

HINTS:
1. Extension for the above question
2. use fact_sales_monthly, dim_product tables
3. concepts like CTE’s, joins, distinct, count, as, select, where,
Groupby, order by, etc

CODE:
WITH unique_product AS
( SELECT
      b.segment AS segment,
      COUNT(DISTINCT
          (CASE 
              WHEN fiscal_year = 2020 THEN a.product_code END)) AS product_count_2020,
       COUNT(DISTINCT
          (CASE 
              WHEN fiscal_year = 2021 THEN a.product_code END)) AS product_count_2021        
 FROM fact_sales_monthly AS a
 INNER JOIN dim_product AS b
 ON a.product_code = b.product_code
 GROUP BY b.segment
)
SELECT segment, product_count_2020, product_count_2021, (product_count_2021-product_count_2020) AS difference
FROM unique_product
ORDER BY difference DESC;


------------------------------------------------------------------------------------------------------------------


5. Get the products that have the highest and lowest manufacturing costs.
The final output should contain these fields,
product_code
product
manufacturing_cost

HINTS:
1. use fact_manufacturing_cost, dim_product
2. concepts like joins, where, min, max, sub-queries

CODE:
SELECT dp.product_code, dp.product, manufacturing_cost 
FROM dim_product dp 
INNER JOIN fact_manufacturing_cost fm 
ON dp.product_code = fm.product_code
WHERE fm.manufacturing_cost = (Select MAX(manufacturing_cost) FROM fact_manufacturing_cost)
OR fm.manufacturing_cost = (Select MIN(manufacturing_cost) FROM fact_manufacturing_cost)
ORDER BY manufacturing_cost DESC;

---------------------------------------------------------------------------------------------------

6. Generate a report which contains the top 5 customers who received an
average high pre_invoice_discount_pct for the fiscal year 2021 and in the
Indian market. The final output contains these fields,
customer_code
customer
average_discount_percentage

HINTS:
1. use fact_pre_invoice_deductions, dim_customer
2. concepts like joins, where, Group by, Aggregate function(Avg), Round,
order by, Limit, etc

CODE:
SELECT dc.customer_code, dc.customer, round(Avg(pre_invoice_discount_pct)*100,2) AS average_discount_percentage
FROM dim_customer AS dc
INNER JOIN fact_pre_invoice_deductions AS fp
ON dc.customer_code = fp.customer_code
WHERE market="INDIA"
and fiscal_year=2021
group by customer, customer_code
order by avg(pre_invoice_discount_pct) desc
LIMIT 5;

---------------------------------------------------------------------------------------------------

7. Get the complete report of the Gross sales amount for the customer “Atliq
Exclusive” for each month. This analysis helps to get an idea of low and
high-performing months and take strategic decisions.
The final report contains these columns:
Month
Year
Gross sales Amount

HINTS:
1. Gross sales Amount = gross_price * sold_quantity
2. use fact_sales_monthly, dim_customer, fact_gross_price tables
3. concepts like Multiple Joins, Group by, where, Round, and Aggregate
function(sum).

CODE:
SELECT monthname(fs.date) AS Month,
YEAR(fs.date) AS Year, 
ROUND(SUM(fg.gross_price*fs.sold_quantity),2) AS gross_Sales_Amount
FROM fact_sales_monthly AS fs 
INNER JOIN dim_customer AS dc ON fs.customer_code = dc.customer_code
INNER JOIN fact_gross_price AS fg
ON fs.product_code = fg.product_code
WHERE dc.customer = 'Atliq Exclusive'
GROUP BY fs.date
ORDER BY year;

---------------------------------------------------------------------------------------------------

8. In which quarter of 2020, got the maximum total_sold_quantity? The final
output contains these fields sorted by the total_sold_quantity,
Quarter
total_sold_quantity

HINTS:
1. use the fact_sales_monthly table
2. derive the Month from the date and assign a Quarter. Note that fiscal_year
for Atliq Hardware starts from September(09)
3. concepts like CTEs, case-when, where, Group by, Order by, and
Aggregate function(sum).

CODE: 
SELECT CASE
		WHEN MONTH(date) IN (9,10,11) THEN 'Q1'
		WHEN MONTH(date) IN (12,1,2) THEN 'Q2'
		WHEN MONTH(date) IN (3,4,5) THEN 'Q3'
		ELSE 'Q4'
		END AS quarters,
	   SUM(sold_quantity) AS total_quantity_sold
FROM fact_sales_monthly
WHERE fiscal_year = 2020
GROUP BY quarters
ORDER BY total_quantity_sold DESC;

---------------------------------------------------------------------------------------------------

9. Which channel helped to bring more gross sales in the fiscal year 2021
and the percentage of contribution? The final output contains these fields,
channel
gross_sales_mln
percentage

HINTS:
1. gross_sales_mln = gross_price * sold_quantity
2. use fact_sales_monthly, fact_gross_price, dim_customer tables
3. concepts like joins, CTEs, where, Group by, Aggregate function(sum),
Round, order by, Limit, and window functions

CODE:
WITH gross_sales AS
( 
 SELECT c.channel AS channel_,
        ROUND(SUM(b.gross_price*a.sold_quantity)/1000000,2) /* converting values to millions*/
 AS gross_sales_million
 FROM fact_sales_monthly AS a
 LEFT JOIN fact_gross_price AS b
 ON a.product_code = b.product_code
 AND a.fiscal_year = b.fiscal_year
LEFT JOIN dim_customer AS c
 ON 
 a.customer_code = c.customer_code
 WHERE a.fiscal_year = 2021
 GROUP BY c.channel
)

SELECT channel_,
       CONCAT('$',gross_sales_million) AS gross_sales_million,
	CONCAT(ROUND(gross_sales_million/ SUM(gross_sales_million) OVER()*100,2),'%') AS percentage
FROM gross_sales
ORDER BY percentage DESC;

---------------------------------------------------------------------------------------------------

10. Get the Top 3 products in each division that have a high
total_sold_quantity in the fiscal_year 2021? The final output contains these
fields,
division
product_code
product
total_sold_quantity
rank_order

HINTS:
1. use fact_sales_monthly, dim_product tables
2. concepts like CTEs, filtering, Group by, Aggregate function(sum), window
functions like Rank, Partition By

CODE:
WITH top_sold_products AS 
(
	SELECT b.division AS division,
		   b.product_code AS product_code,
		   b.product AS product,
		   SUM(a.sold_quantity) AS total_sold_quantity
	FROM fact_sales_monthly AS a
	INNER JOIN dim_product AS b
	ON a.product_code = b.product_code
	WHERE a.fiscal_year = 2021
	GROUP BY  b.division, b.product_code, b.product 
	ORDER BY total_sold_quantity DESC
),
top_sold_per_division AS 
( SELECT division,
	    product_code,
        product,
        total_sold_quantity,
        DENSE_RANK() OVER(PARTITION BY division ORDER BY total_sold_quantity DESC) AS rank_order
 FROM top_sold_products
 )
 SELECT * FROM top_sold_per_division
 WHERE rank_order <= 3;

---------------------------------------------------------------------------------------------------